src {
	parsing {
		parsing_scene
		parsing_obj
	}
	free {
		free scene
		free obj
	}
	scene {
		scene printing
		object selectio
		object manipulation
	}
	asset rendering {
		shape
		edition asset
		floor // optional
	}
	driver {
		rasterizer {
			{
				// the rasterizer take a struct that is initialise in the mlx loop each frame
				struct img
				{
					int zbuffer[HEIGHT][WIDTH] // the order is important for the rasterizer
					uint color[HEIGHT][WIDTH]
					int obj_id[HEIGHT][WIDTH] // to now on wich obj i'm clicking
				}
				// may be the size is a little bit overkill we will see in the future
				// the print is done at the end of the loop to avoid call overhead
			}
			triangle rasterizer // with zbuffering check and band check
			rectangle rasterizer 
			triangle mesh
			rectangle mesh
			background loader
		}
		enviroment {
			window management //the goal this to take the t_mlx and to what must be done
			loop management
			clear
		}
		hook {
			keyboard
			mouse 
			window
		}
	}
}


mlx loop 
{
	init struct img
	fill the scene img with the struct
	print the struct img
}

typedef struct s_scene
{
	t_object		*object;
	t_light			*light;
	t_camera		*cam;
	t_mlx			*mlx;
}					t_scene;
